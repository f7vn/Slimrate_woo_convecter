// JavaScript –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ Slimrate Sync
jQuery(document).ready(function($) {
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    initSlimrateAdmin();
    
    function initSlimrateAdmin() {
        // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        bindEventHandlers();
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        startStatusAutoUpdate();
    }
    
    function bindEventHandlers() {
        // –ö–Ω–æ–ø–∫–∞ —Ä—É—á–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        $('#manual-sync-btn').on('click', handleManualSync);
        
        // –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        $('#test-connection-btn').on('click', handleTestConnection);
        
        // –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        $('#reset-sync-btn').on('click', handleResetSyncTime);
        
        // –ö–Ω–æ–ø–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ API
        $('#api-diagnostics-btn').on('click', handleApiDiagnostics);
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º –Ω–∞—Å—Ç—Ä–æ–µ–∫
        $('.slimrate-settings form').on('submit', handleSettingsSubmit);
    }
    
    // –†—É—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
    function handleManualSync() {
        const $btn = $('#manual-sync-btn');
        const $log = $('#sync-log');
        
        // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        setButtonLoading($btn, true);
        showSyncLog('–ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...', 'info');
        
        $.ajax({
            url: slimrateAjax.ajaxurl,
            type: 'POST',
            data: {
                action: 'slimrate_manual_sync',
                nonce: slimrateAjax.nonce
            },
            success: function(response) {
                if (response.success) {
                    showSyncLog('‚úÖ ' + response.data.message, 'success');
                    showSyncLog(response.data.details, 'info');
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    showNotice(response.data.message, 'success');
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    updateStats(response.data.stats);
                } else {
                    showSyncLog('‚ùå ' + response.data.message, 'error');
                    showNotice(response.data.message, 'error');
                }
            },
            error: function(xhr, status, error) {
                const errorMsg = '–û—à–∏–±–∫–∞ AJAX: ' + error;
                showSyncLog('‚ùå ' + errorMsg, 'error');
                showNotice(errorMsg, 'error');
            },
            complete: function() {
                setButtonLoading($btn, false);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è —Å–≤–µ–∂–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                setTimeout(function() {
                    location.reload();
                }, 2000);
            }
        });
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    function handleTestConnection() {
        const $btn = $('#test-connection-btn');
        
        setButtonLoading($btn, true);
        
        $.ajax({
            url: slimrateAjax.ajaxurl,
            type: 'POST',
            data: {
                action: 'slimrate_test_connection',
                nonce: slimrateAjax.nonce
            },
            success: function(response) {
                if (response.success) {
                    showNotice(response.data.message + '<br>' + response.data.details, 'success');
                    
                    // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ—ë –≤ –∫–æ–Ω—Å–æ–ª–∏
                    if (response.data.diagnostics) {
                        console.log('–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ API:', response.data.diagnostics);
                    }
                } else {
                    let errorMessage = response.data.message;
                    
                    // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –µ—ë –ø–æ–∫–∞–∑–∞
                    if (response.data.diagnostics) {
                        errorMessage += '<br><br><button onclick="showDiagnosticsFromError()" class="button button-small">üîç –ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É</button>';
                        
                        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –¥–ª—è –ø–æ–∫–∞–∑–∞
                        window.lastDiagnosticsData = {
                            diagnostics: response.data.diagnostics,
                            api_stats: response.data.api_info || {}
                        };
                    }
                    
                    showNotice(errorMessage, 'error');
                }
            },
            error: function(xhr, status, error) {
                showNotice('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ' + error, 'error');
            },
            complete: function() {
                setButtonLoading($btn, false);
            }
        });
    }
    
    // –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏–∑ –æ—à–∏–±–∫–∏
    window.showDiagnosticsFromError = function() {
        if (window.lastDiagnosticsData) {
            showDiagnosticsModal(window.lastDiagnosticsData);
        }
    };
    
    // –°–±—Ä–æ—Å –≤—Ä–µ–º–µ–Ω–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    function handleResetSyncTime() {
        if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏?\n\n–°–ª–µ–¥—É—é—â–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∏—Ç —Ç–æ–≤–∞—Ä—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞.')) {
            return;
        }
        
        const $btn = $('#reset-sync-btn');
        
        setButtonLoading($btn, true);
        
        $.ajax({
            url: slimrateAjax.ajaxurl,
            type: 'POST',
            data: {
                action: 'slimrate_reset_sync_time',
                nonce: slimrateAjax.nonce
            },
            success: function(response) {
                if (response.success) {
                    showNotice(response.data.message, 'success');
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö
                    setTimeout(function() {
                        location.reload();
                    }, 1500);
                } else {
                    showNotice(response.data.message, 'error');
                }
            },
            error: function(xhr, status, error) {
                showNotice('–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞: ' + error, 'error');
            },
            complete: function() {
                setButtonLoading($btn, false);
            }
        });
    }
    
    // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ API
    function handleApiDiagnostics() {
        const $btn = $('#api-diagnostics-btn');
        
        setButtonLoading($btn, true);
        
        $.ajax({
            url: slimrateAjax.ajaxurl,
            type: 'POST',
            data: {
                action: 'slimrate_get_api_diagnostics',
                nonce: slimrateAjax.nonce
            },
            success: function(response) {
                if (response.success) {
                    showDiagnosticsModal(response.data);
                } else {
                    showNotice('–û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: ' + response.data.message, 'error');
                }
            },
            error: function(xhr, status, error) {
                showNotice('–û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: ' + error, 'error');
            },
            complete: function() {
                setButtonLoading($btn, false);
            }
        });
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    function handleSettingsSubmit() {
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        const $submitBtn = $(this).find('input[type="submit"]');
        setButtonLoading($submitBtn, true);
        
        // WordPress –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏,
        // –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏ —Å–Ω–∏–º–∞–µ–º –µ—ë —á–µ—Ä–µ–∑ —Ç–∞–π–º–∞—É—Ç
        setTimeout(function() {
            setButtonLoading($submitBtn, false);
        }, 2000);
    }
    
    // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
    function startStatusAutoUpdate() {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        setInterval(updateSyncStatus, 30000);
        
        // –ü–µ—Ä–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
        setTimeout(updateSyncStatus, 5000);
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    function updateSyncStatus() {
        $.ajax({
            url: slimrateAjax.ajaxurl,
            type: 'POST',
            data: {
                action: 'slimrate_get_sync_status',
                nonce: slimrateAjax.nonce
            },
            success: function(response) {
                if (response.success) {
                    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
                    updateLastSyncTime(response.data.last_sync_time);
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
                    updateAutoSyncStatus(response.data.auto_sync_enabled);
                }
            },
            error: function() {
                // –¢–∏—Ö–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            }
        });
    }
    
    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    
    function setButtonLoading($button, loading) {
        if (loading) {
            $button.addClass('loading');
            $button.prop('disabled', true);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
            if (!$button.data('original-text')) {
                $button.data('original-text', $button.text());
            }
            
            $button.text('–ó–∞–≥—Ä—É–∑–∫–∞...');
        } else {
            $button.removeClass('loading');
            $button.prop('disabled', false);
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
            if ($button.data('original-text')) {
                $button.text($button.data('original-text'));
            }
        }
    }
    
    function showSyncLog(message, type) {
        const $log = $('#sync-log');
        const timestamp = new Date().toLocaleTimeString();
        const logClass = 'log-' + type;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ª–æ–≥
        const logEntry = `<div class="log-entry ${logClass}">[${timestamp}] ${message}</div>`;
        $log.append(logEntry);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–≥ –µ—Å–ª–∏ –æ–Ω —Å–∫—Ä—ã—Ç
        $log.addClass('active');
        
        // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤–Ω–∏–∑
        $log.scrollTop($log[0].scrollHeight);
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 50)
        const $entries = $log.find('.log-entry');
        if ($entries.length > 50) {
            $entries.first().remove();
        }
    }
    
    function showNotice(message, type) {
        // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        $('.slimrate-notice').remove();
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const $notice = $(`
            <div class="slimrate-notice ${type}">
                <p>${message}</p>
            </div>
        `);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        $('.wrap').prepend($notice);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(function() {
            $notice.fadeOut(function() {
                $notice.remove();
            });
        }, 5000);
    }
    
    function updateStats(stats) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        if (stats && $('.stats-grid').length) {
            $('.stats-grid').find('.stat-item').each(function(index) {
                const $statNumber = $(this).find('.stat-number');
                const $statLabel = $(this).find('.stat-label');
                
                switch(index) {
                    case 0:
                        $statNumber.text(stats.processed);
                        $statLabel.text('–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤');
                        break;
                    case 1:
                        $statNumber.text(stats.created);
                        $statLabel.text('–°–æ–∑–¥–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤');
                        break;
                    case 2:
                        $statNumber.text(stats.updated);
                        $statLabel.text('–û–±–Ω–æ–≤–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤');
                        break;
                    case 3:
                        $statNumber.text(stats.deleted);
                        $statLabel.text('–£–¥–∞–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤');
                        break;
                }
            });
        }
    }
    
    function updateLastSyncTime(syncTime) {
        if (syncTime) {
            const formatted = new Date(syncTime).toLocaleString('ru-RU');
            $('.sync-status p:first-child strong:contains("–ü–æ—Å–ª–µ–¥–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è")')
                .parent()
                .html('<strong>–ü–æ—Å–ª–µ–¥–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è:</strong> ' + formatted);
        }
    }
    
    function updateAutoSyncStatus(enabled) {
        const $statusSpan = $('.sync-status .status-enabled, .sync-status .status-disabled');
        
        if (enabled) {
            $statusSpan.removeClass('status-disabled').addClass('status-enabled');
            $statusSpan.text('üü¢ –í–∫–ª—é—á–µ–Ω–∞');
        } else {
            $statusSpan.removeClass('status-enabled').addClass('status-disabled');
            $statusSpan.text('üî¥ –û—Ç–∫–ª—é—á–µ–Ω–∞');
        }
    }
    
    // –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–ª—è –¥–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    function showProgressBar(show) {
        if (show) {
            if ($('.sync-progress').length === 0) {
                const progressHtml = `
                    <div class="sync-progress">
                        <div class="sync-progress-bar"></div>
                    </div>
                `;
                $('.sync-controls').after(progressHtml);
            }
            $('.sync-progress').addClass('active');
            
            // –ê–Ω–∏–º–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            let progress = 0;
            const interval = setInterval(function() {
                progress += Math.random() * 15;
                if (progress > 90) progress = 90;
                
                $('.sync-progress-bar').css('width', progress + '%');
                
                if (!$('.sync-progress').hasClass('active')) {
                    clearInterval(interval);
                }
            }, 500);
        } else {
            $('.sync-progress-bar').css('width', '100%');
            setTimeout(function() {
                $('.sync-progress').removeClass('active');
            }, 500);
        }
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ tooltip
    $('.error-message').on('mouseenter', function() {
        const errorText = $(this).attr('title');
        if (errorText) {
            $(this).after(`<div class="error-tooltip">${errorText}</div>`);
            
            const $tooltip = $('.error-tooltip');
            const offset = $(this).offset();
            
            $tooltip.css({
                position: 'absolute',
                top: offset.top + 25,
                left: offset.left,
                background: '#2c3338',
                color: '#fff',
                padding: '8px 12px',
                borderRadius: '4px',
                fontSize: '12px',
                maxWidth: '300px',
                zIndex: 1000,
                wordWrap: 'break-word'
            });
        }
    });
    
    $('.error-message').on('mouseleave', function() {
        $('.error-tooltip').remove();
    });
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫
    $('.slimrate-settings input[name="slimrate_api_token"]').on('blur', function() {
        const token = $(this).val().trim();
        if (token.length > 0 && token.length < 10) {
            showNotice('API —Ç–æ–∫–µ–Ω –∫–∞–∂–µ—Ç—Å—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å.', 'warning');
        }
    });
    
    $('.slimrate-settings input[name="slimrate_api_url"]').on('blur', function() {
        const url = $(this).val().trim();
        if (url && !url.match(/^https?:\/\/.+/)) {
            showNotice('URL API –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://', 'warning');
        }
    });
    
    // Keyboard shortcuts
    $(document).on('keydown', function(e) {
        // Ctrl/Cmd + R –¥–ª—è —Ä—É—á–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        if ((e.ctrlKey || e.metaKey) && e.key === 'r' && e.shiftKey) {
            e.preventDefault();
            if ($('#manual-sync-btn').length && !$('#manual-sync-btn').prop('disabled')) {
                $('#manual-sync-btn').click();
            }
        }
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –æ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à–∞—Ö
    if ($('#manual-sync-btn').length) {
        $('#manual-sync-btn').attr('title', '–ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏: Ctrl+Shift+R');
    }
    
    // –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ API
    function showDiagnosticsModal(data) {
        // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        $('.diagnostics-modal').remove();
        
        const diagnostics = data.diagnostics;
        const apiStats = data.api_stats;
        
        const modalHtml = `
            <div class="diagnostics-modal" style="
                position: fixed;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                background: white;
                border: 1px solid #ccc;
                border-radius: 8px;
                padding: 20px;
                max-width: 600px;
                width: 90%;
                max-height: 80vh;
                overflow-y: auto;
                z-index: 10001;
                box-shadow: 0 4px 20px rgba(0,0,0,0.3);
            ">
                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
                    <h2 style="margin: 0;">üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ API Slimrate</h2>
                    <button class="close-diagnostics" style="
                        background: none;
                        border: none;
                        font-size: 24px;
                        cursor: pointer;
                        color: #666;
                    ">&times;</button>
                </div>
                
                <div style="margin-bottom: 15px;">
                    <h3>üìä –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
                    <table style="width: 100%; border-collapse: collapse;">
                        <tr>
                            <td style="padding: 8px; border-bottom: 1px solid #eee;"><strong>API URL:</strong></td>
                            <td style="padding: 8px; border-bottom: 1px solid #eee;">${apiStats.api_url}</td>
                        </tr>
                        <tr>
                            <td style="padding: 8px; border-bottom: 1px solid #eee;"><strong>–¢–æ–∫–µ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:</strong></td>
                            <td style="padding: 8px; border-bottom: 1px solid #eee;">
                                <span style="color: ${apiStats.token_set ? 'green' : 'red'};">
                                    ${apiStats.token_set ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç'}
                                </span>
                            </td>
                        </tr>
                        <tr>
                            <td style="padding: 8px; border-bottom: 1px solid #eee;"><strong>–î–ª–∏–Ω–∞ —Ç–æ–∫–µ–Ω–∞:</strong></td>
                            <td style="padding: 8px; border-bottom: 1px solid #eee;">${apiStats.token_length} —Å–∏–º–≤–æ–ª–æ–≤</td>
                        </tr>
                        <tr>
                            <td style="padding: 8px; border-bottom: 1px solid #eee;"><strong>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ–∫–µ–Ω–∞:</strong></td>
                            <td style="padding: 8px; border-bottom: 1px solid #eee;"><code>${apiStats.token_preview}</code></td>
                        </tr>
                    </table>
                </div>
                
                <div style="margin-bottom: 15px;">
                    <h3>üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞</h3>
                    <table style="width: 100%; border-collapse: collapse;">
                        <tr>
                            <td style="padding: 8px; border-bottom: 1px solid #eee;"><strong>–¢–æ–∫–µ–Ω—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç:</strong></td>
                            <td style="padding: 8px; border-bottom: 1px solid #eee;">
                                <span style="color: ${diagnostics.tokens_match ? 'green' : 'red'};">
                                    ${diagnostics.tokens_match ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç'}
                                </span>
                            </td>
                        </tr>
                        <tr>
                            <td style="padding: 8px; border-bottom: 1px solid #eee;"><strong>URL —Å–æ–≤–ø–∞–¥–∞—é—Ç:</strong></td>
                            <td style="padding: 8px; border-bottom: 1px solid #eee;">
                                <span style="color: ${diagnostics.urls_match ? 'green' : 'red'};">
                                    ${diagnostics.urls_match ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç'}
                                </span>
                            </td>
                        </tr>
                        <tr>
                            <td style="padding: 8px; border-bottom: 1px solid #eee;"><strong>–¢–æ–∫–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—É—Å—Ç:</strong></td>
                            <td style="padding: 8px; border-bottom: 1px solid #eee;">
                                <span style="color: ${diagnostics.settings_token_empty ? 'red' : 'green'};">
                                    ${diagnostics.settings_token_empty ? '‚ùå –î–∞' : '‚úÖ –ù–µ—Ç'}
                                </span>
                            </td>
                        </tr>
                        <tr>
                            <td style="padding: 8px; border-bottom: 1px solid #eee;"><strong>–¢–æ–∫–µ–Ω –≤ –∫–ª–∞—Å—Å–µ –ø—É—Å—Ç:</strong></td>
                            <td style="padding: 8px; border-bottom: 1px solid #eee;">
                                <span style="color: ${diagnostics.class_token_empty ? 'red' : 'green'};">
                                    ${diagnostics.class_token_empty ? '‚ùå –î–∞' : '‚úÖ –ù–µ—Ç'}
                                </span>
                            </td>
                        </tr>
                    </table>
                </div>
                
                <div style="text-align: center;">
                    <button class="button button-primary close-diagnostics">–ó–∞–∫—Ä—ã—Ç—å</button>
                </div>
            </div>
            <div class="diagnostics-overlay" style="
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: rgba(0,0,0,0.5);
                z-index: 10000;
            "></div>
        `;
        
        $('body').append(modalHtml);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        $('.close-diagnostics, .diagnostics-overlay').on('click', function() {
            $('.diagnostics-modal, .diagnostics-overlay').remove();
        });
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ ESC
        $(document).on('keydown.diagnostics', function(e) {
            if (e.key === 'Escape') {
                $('.diagnostics-modal, .diagnostics-overlay').remove();
                $(document).off('keydown.diagnostics');
            }
        });
    }
}); 