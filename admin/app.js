import { AUTH_TOKEN } from './js/core/config.js';
import { addLogEntry } from './js/core/utils.js';
import { renderCreateItemForm } from './js/products/createItem.js';
import { initTabs } from './js/components/tabs.js';
import { updateItemsFromSlimrate, resetLastUpdatedAt } from './js/sync/updateItems.js';
import { initAutoSync, performAutoSync } from './js/core/scheduler.js';

document.addEventListener('DOMContentLoaded', async function() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –≤–∫–ª–∞–¥–æ–∫
    initTabs();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–æ—Ä–º—É —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
    await renderCreateItemForm();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
    initAutoSync();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
    initTimeDisplay();
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö (—Å–∏—Å—Ç–µ–º–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞)
    document.getElementById('loadTaxesBtn').addEventListener('click', loadTaxes);
    document.getElementById('loadUnitsBtn').addEventListener('click', loadUnits);
    document.getElementById('loadCategoriesBtn').addEventListener('click', loadCategories);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
    document.getElementById('updateItemsBtn').addEventListener('click', updateItemsFromSlimrate);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–±—Ä–æ—Å–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    document.getElementById('resetLastSyncBtn').addEventListener('click', () => {
        if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏?\n\n–≠—Ç–æ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ —Ç–æ–º—É, —á—Ç–æ —Å–ª–µ–¥—É—é—â–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∏—Ç –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞.')) {
            resetLastUpdatedAt();
            addLogEntry('üîÑ –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–±—Ä–æ—à–µ–Ω–æ', 'warning', 'system');
        }
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    document.getElementById('test-sync').addEventListener('click', async () => {
        addLogEntry('üîÑ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...', 'info', 'system');
        await performAutoSync();
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è ISO –≤—Ä–µ–º–µ–Ω–∏
    document.getElementById('copyISOBtn').addEventListener('click', copyISOTime);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤
    document.getElementById('clearLogBtn').addEventListener('click', () => {
        document.getElementById('itemLog').innerHTML = '';
        addLogEntry('–õ–æ–≥ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –æ—á–∏—â–µ–Ω', 'info');
    });
    
    document.getElementById('clearSystemLogBtn').addEventListener('click', () => {
        document.getElementById('systemLog').innerHTML = '';
        addLogEntry('–°–∏—Å—Ç–µ–º–Ω—ã–π –ª–æ–≥ –æ—á–∏—â–µ–Ω', 'info', 'system');
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
    document.getElementById('save-search-settings').addEventListener('click', saveSearchSettings);
    document.getElementById('test-search').addEventListener('click', testProductSearch);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞
    loadSearchSettings();
    
});

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏
function initTimeDisplay() {
    updateTimeDisplay();
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
    setInterval(updateTimeDisplay, 1000);
}

function updateTimeDisplay() {
    const now = new Date();
    
    // GMT –≤—Ä–µ–º—è
    const gmtTime = now.toUTCString().split(' ')[4]; // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è HH:MM:SS
    document.getElementById('currentGMTTime').textContent = gmtTime;
    
    // ISO —Ñ–æ—Ä–º–∞—Ç –¥–ª—è API
    const isoTime = now.toISOString();
    document.getElementById('currentISOTime').textContent = isoTime;
    
    // –õ–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
    const localTime = now.toLocaleTimeString('ru-RU', { 
        hour12: false,
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit'
    });
    document.getElementById('currentLocalTime').textContent = localTime;
}

function copyISOTime() {
    const isoTime = document.getElementById('currentISOTime').textContent;
    const copyBtn = document.getElementById('copyISOBtn');
    
    navigator.clipboard.writeText(isoTime).then(() => {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
        const originalText = copyBtn.textContent;
        copyBtn.textContent = '–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!';
        copyBtn.classList.add('copied');
        
        setTimeout(() => {
            copyBtn.textContent = originalText;
            copyBtn.classList.remove('copied');
        }, 2000);
        
        addLogEntry(`ISO –≤—Ä–µ–º—è —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞: ${isoTime}`, 'info', 'system');
    }).catch(err => {
        addLogEntry(`–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: ${err.message}`, 'error', 'system');
    });
}

async function loadTaxes() {
    try {
        addLogEntry('–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞–ª–æ–≥–æ–≤...', 'info', 'system');
        
        const response = await fetch('https://dev.slimrate.com/v1/taxes/read', {
            method: 'POST',
            headers: { 
                'Authorization': AUTH_TOKEN,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ ids: [] })
        });
        
        const data = await response.json();
        
        if (response.ok && data.result) {
            const taxes = data.result;
            let taxesHtml = '<h2>–ù–∞–ª–æ–≥–∏</h2>';
            
            taxes.forEach(tax => {
                const isDefault = tax.isDefault ? ' default-tax' : '';
                taxesHtml += `
                    <div class="tax-row${isDefault}">
                        <span class="tax-name">${tax.name || tax.displayName}</span>
                        <span class="tax-id">ID: ${tax.id}</span>
                        <span class="tax-percent">${tax.percent}%</span>
                    </div>
                `;
            });
            
            document.getElementById('dataDisplay').innerHTML = taxesHtml;
            addLogEntry(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${taxes.length} –Ω–∞–ª–æ–≥–æ–≤`, 'success', 'system');
        } else {
            throw new Error(data.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
        }
    } catch (error) {
        addLogEntry(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞–ª–æ–≥–æ–≤: ${error.message}`, 'error', 'system');
    }
}

async function loadUnits() {
    try {
        addLogEntry('–ó–∞–≥—Ä—É–∑–∫–∞ –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è...', 'info', 'system');
        
        const response = await fetch('https://dev.slimrate.com/v1/units/read', {
            method: 'POST',
            headers: { 
                'Authorization': AUTH_TOKEN,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ ids: [] })
        });
        
        const data = await response.json();
        
        if (response.ok && data.result) {
            const units = data.result;
            let unitsHtml = '<h2>–ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è</h2>';
            
            units.forEach(unit => {
                unitsHtml += `
                    <div class="unit-row">
                        <span class="unit-abbr">${unit.abbreviation}</span>
                        <span class="unit-id">ID: ${unit.id}</span>
                        <span class="unit-name">${unit.name || unit.displayName}</span>
                    </div>
                `;
            });
            
            document.getElementById('dataDisplay').innerHTML = unitsHtml;
            addLogEntry(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${units.length} –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è`, 'success', 'system');
        } else {
            throw new Error(data.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
        }
    } catch (error) {
        addLogEntry(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è: ${error.message}`, 'error', 'system');
    }
}

async function loadCategories() {
    try {
        addLogEntry('–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...', 'info', 'system');
        
        const response = await fetch('https://dev.slimrate.com/v1/categories/read', {
            method: 'POST',
            headers: { 
                'Authorization': AUTH_TOKEN,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ 
                ids: [], 
                search: '', 
                sortBy: '', 
                sortAscending: false, 
                returnCsvUrl: false 
            })
        });
        
        const data = await response.json();
        
        if (response.ok && data.result) {
            const categories = data.result;
            let categoriesHtml = '<h2>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏</h2>';
            
            categories.forEach(category => {
                categoriesHtml += `
                    <div class="category-row">
                        <span class="category-name">${category.displayName}</span>
                        <span class="category-id">ID: ${category.id}</span>
                    </div>
                `;
                
                if (category.subcategories && category.subcategories.length > 0) {
                    categoriesHtml += '<div class="subcategory-list">';
                    category.subcategories.forEach(sub => {
                        categoriesHtml += `
                            <div class="subcategory-row">
                                <span class="subcategory-name">${sub.displayName}</span>
                                <span class="subcategory-id">ID: ${sub.id}</span>
                            </div>
                        `;
                    });
                    categoriesHtml += '</div>';
                }
            });
            
            document.getElementById('dataDisplay').innerHTML = categoriesHtml;
            addLogEntry(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${categories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π`, 'success', 'system');
        } else {
            throw new Error(data.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
        }
    } catch (error) {
        addLogEntry(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${error.message}`, 'error', 'system');
    }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤

function loadSearchSettings() {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ localStorage
    const enableLinking = localStorage.getItem('search_enable_linking');
    const enableCreation = localStorage.getItem('search_enable_creation');
    const enableImages = localStorage.getItem('search_enable_images');
    const strategy = localStorage.getItem('search_strategy');
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
    if (enableLinking !== null) {
        document.getElementById('enable-linking').checked = enableLinking === 'true';
    }
    
    if (enableCreation !== null) {
        document.getElementById('enable-creation').checked = enableCreation === 'true';
    }
    
    if (enableImages !== null) {
        document.getElementById('enable-images').checked = enableImages === 'true';
    }
    
    if (strategy) {
        document.getElementById('search-strategy').value = strategy;
    }
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ SEARCH_CONFIG
    updateSearchConfig();
    
    addLogEntry('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω—ã', 'info', 'system');
}

function saveSearchSettings() {
    const enableLinking = document.getElementById('enable-linking').checked;
    const enableCreation = document.getElementById('enable-creation').checked;
    const enableImages = document.getElementById('enable-images').checked;
    const strategy = document.getElementById('search-strategy').value;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
    localStorage.setItem('search_enable_linking', enableLinking.toString());
    localStorage.setItem('search_enable_creation', enableCreation.toString());
    localStorage.setItem('search_enable_images', enableImages.toString());
    localStorage.setItem('search_strategy', strategy);
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ SEARCH_CONFIG
    updateSearchConfig();
    
    addLogEntry(`–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: –∞–≤—Ç–æ–ø—Ä–∏–≤—è–∑–∫–∞=${enableLinking ? '–≤–∫–ª' : '–≤—ã–∫–ª'}, –∞–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–∏–µ=${enableCreation ? '–≤–∫–ª' : '–≤—ã–∫–ª'}, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è=${enableImages ? '–≤–∫–ª' : '–≤—ã–∫–ª'}, —Å—Ç—Ä–∞—Ç–µ–≥–∏—è=${strategy}`, 'success', 'system');
}

function updateSearchConfig() {
    const enableLinking = document.getElementById('enable-linking').checked;
    const enableCreation = document.getElementById('enable-creation').checked;
    const enableImages = document.getElementById('enable-images').checked;
    const strategy = document.getElementById('search-strategy').value;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if (window.SEARCH_CONFIG) {
        window.SEARCH_CONFIG.enableProductLinking = enableLinking;
        window.SEARCH_CONFIG.enableProductCreation = enableCreation;
        window.SEARCH_CONFIG.enableImageSync = enableImages;
        window.SEARCH_CONFIG.matchingStrategy = strategy;
    } else {
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        window.SEARCH_CONFIG = {
            enableProductLinking: enableLinking,
            enableProductCreation: enableCreation,
            enableImageSync: enableImages,
            matchingStrategy: strategy
        };
    }
    
    addLogEntry(`–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: –∞–≤—Ç–æ–ø—Ä–∏–≤—è–∑–∫–∞=${enableLinking}, –∞–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–∏–µ=${enableCreation}, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è=${enableImages}, —Å—Ç—Ä–∞—Ç–µ–≥–∏—è=${strategy}`, 'info', 'system');
}

async function testProductSearch() {
    try {
        addLogEntry('üîç –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤...', 'info', 'system');
        
        // –ü–æ–ª—É—á–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é –≤—ã–±–æ—Ä–∫—É —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ Slimrate –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        const response = await fetch('https://dev.slimrate.com/v1/items/read/tablet', {
            method: 'POST',
            headers: { 
                'Authorization': AUTH_TOKEN,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                limit: 5,
                offset: 0
            })
        });
        
        const data = await response.json();
        
        if (response.ok && data.result) {
            const items = data.result;
            addLogEntry(`–ü–æ–ª—É—á–µ–Ω–æ ${items.length} —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è`, 'info', 'system');
            
            let foundCount = 0;
            let newLinksCount = 0;
            
            // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–∏—Å–∫–∞
            const { findWooProductBySlimrateId, findWooProductByMultipleCriteria } = await import('./js/sync/updateItems.js');
            
            for (const item of items.slice(0, 3)) { // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3
                const searchId = (item.varName === "" || !item.varName) ? item.rootId : item.id;
                
                addLogEntry(`–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä: ${searchId} - "${item.rootName || item.displayName}"`, 'info', 'system');
                
                // –°–Ω–∞—á–∞–ª–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ–∏—Å–∫
                let wooProduct = await findWooProductBySlimrateId(searchId);
                
                if (wooProduct) {
                    addLogEntry(`‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ Slimrate ID: WC${wooProduct.id}`, 'success', 'system');
                    foundCount++;
                } else {
                    // –ü—Ä–æ–±—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫
                    wooProduct = await findWooProductByMultipleCriteria(item);
                    
                    if (wooProduct) {
                        addLogEntry(`üîç –ù–∞–π–¥–µ–Ω –ø–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º: WC${wooProduct.id}`, 'success', 'system');
                        foundCount++;
                        newLinksCount++;
                    } else {
                        addLogEntry(`‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω`, 'warning', 'system');
                    }
                }
            }
            
            addLogEntry(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞: –Ω–∞–π–¥–µ–Ω–æ ${foundCount} –∏–∑ 3, –Ω–æ–≤—ã—Ö –ø—Ä–∏–≤—è–∑–æ–∫: ${newLinksCount}`, 'success', 'system');
            
        } else {
            throw new Error(data.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤');
        }
        
    } catch (error) {
        addLogEntry(`‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${error.message}`, 'error', 'system');
    }
}

 