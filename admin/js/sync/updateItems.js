import { AUTH_TOKEN, WOOCOMMERCE_CONSUMER_KEY, WOOCOMMERCE_CONSUMER_SECRET, WOOCOMMERCE_SITE } from '../core/config.js';
import { addLogEntry } from '../core/utils.js';

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π
function getChangedFieldsLog(oldValues, newValues, fieldsToCompare) {
    const changes = [];
    fieldsToCompare.forEach(fieldKey => {
        const oldValue = oldValues[fieldKey];
        const newValue = newValues[fieldKey];

        // –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Å—Ç—Ä–æ–∫–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º undefined/null –∫–∞–∫ "N/A"
        const oldStr = (oldValue === undefined || oldValue === null) ? "N/A" : String(oldValue);
        const newStr = (newValue === undefined || newValue === null) ? "N/A" : String(newValue);

        if (fieldKey === 'meta_data') {
            // –û—Å–æ–±–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è meta_data, –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç _wpm_gtin_code
            const oldGtinEntry = Array.isArray(oldValue) ? oldValue.find(m => m.key === '_wpm_gtin_code') : undefined;
            const newGtinEntry = Array.isArray(newValue) ? newValue.find(m => m.key === '_wpm_gtin_code') : undefined;
            const oldGtin = oldGtinEntry && oldGtinEntry.value !== undefined ? String(oldGtinEntry.value) : "N/A";
            const newGtin = newGtinEntry && newGtinEntry.value !== undefined ? String(newGtinEntry.value) : "N/A";
            if (oldGtin !== newGtin) {
                changes.push(`_wpm_gtin_code (—Å—Ç–∞—Ä–æ–µ: '${oldGtin}', –Ω–æ–≤–æ–µ: '${newGtin}')`);
            }
            // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö meta-–ø–æ–ª–µ–π –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç–∞–Ω–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        } else if (fieldKey === 'images') {
            // –û—Å–æ–±–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            const oldImagesCount = Array.isArray(oldValue) ? oldValue.length : 0;
            const newImagesCount = Array.isArray(newValue) ? newValue.length : 0;
            
            if (oldImagesCount !== newImagesCount) {
                changes.push(`images (–±—ã–ª–æ: ${oldImagesCount}, —Å—Ç–∞–ª–æ: ${newImagesCount} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)`);
            } else if (Array.isArray(newValue) && newValue.length > 0) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                const oldUrls = Array.isArray(oldValue) ? oldValue.map(img => img.src || img).join(';') : '';
                const newUrls = newValue.map(img => img.src || img).join(';');
                if (oldUrls !== newUrls) {
                    changes.push(`images (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω—ã)`);
                }
            }
        } else if (typeof oldValue === 'object' && oldValue !== null && typeof newValue === 'object' && newValue !== null) {
            // –î–ª—è –¥—Ä—É–≥–∏—Ö –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ - –ø—Ä–æ—Å—Ç–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ JSON.stringify
            if (JSON.stringify(oldValue) !== JSON.stringify(newValue)) {
                changes.push(`${fieldKey} (—Å—Ç–∞—Ä–æ–µ: '${JSON.stringify(oldValue)}', –Ω–æ–≤–æ–µ: '${JSON.stringify(newValue)}')`);
            }
        } else {
            // –î–ª—è –ø—Ä–∏–º–∏—Ç–∏–≤–Ω—ã—Ö —Ç–∏–ø–æ–≤
            if (oldStr !== newStr) {
                changes.push(`${fieldKey} (—Å—Ç–∞—Ä–æ–µ: '${oldStr}', –Ω–æ–≤–æ–µ: '${newStr}')`);
            }
        }
    });
    return changes.length > 0 ? `–ò–∑–º–µ–Ω–µ–Ω—ã –ø–æ–ª—è: ${changes.join('; ')}` : '–ó–Ω–∞—á–∏–º—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–æ–ª–µ–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
function addUpdateLog(message, type = 'info') {
    addLogEntry(message, type, 'system');
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ (–≥–ª–æ–±–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–∞—è)
window.SEARCH_CONFIG = {
    enableProductLinking: true,  // –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–∏–≤—è–∑–∫—É
    enableProductCreation: true, // –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
    enableImageSync: true,       // –í–∫–ª—é—á–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    matchingStrategy: 'auto'     // auto, sku_priority, slimrate_id_only, aggressive
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑–≤–Ω–µ
export function updateSearchConfig(newConfig) {
    window.SEARCH_CONFIG = { ...window.SEARCH_CONFIG, ...newConfig };
    addUpdateLog(`–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: ${JSON.stringify(window.SEARCH_CONFIG)}`, 'info');
}

// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–∞ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏
async function findWooProductBySlimrateId(slimrateId) {
    const baseUrl = `${WOOCOMMERCE_SITE.replace(/\/$/, '')}/wp-json/wc/v3/products`;
    const auth = btoa(`${WOOCOMMERCE_CONSUMER_KEY}:${WOOCOMMERCE_CONSUMER_SECRET}`);
    
    // 1. –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ø–æ slimrate_id (—Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–±)
    const searchUrl = `${baseUrl}?meta_key=slimrate_id&meta_value=${encodeURIComponent(slimrateId)}`;
    addUpdateLog(`–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ –ø–æ Slimrate ID: ${slimrateId}`, 'debug');
    
    const resp = await fetch(searchUrl, {
        headers: { 'Authorization': `Basic ${auth}` }
    });
    const data = await resp.json();
    
    if (Array.isArray(data) && data.length > 0) {
        // –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏
        const filtered = data.filter(product => {
            const meta = product.meta_data || [];
            return meta.some(m => m.key === 'slimrate_id' && String(m.value) === String(slimrateId));
        });
        
        if (filtered.length > 0) {
            const foundProduct = filtered[0];
            addUpdateLog(`‚úÖ –ù–∞–π–¥–µ–Ω —Ç–æ–≤–∞—Ä –ø–æ Slimrate ID: ${foundProduct.id} - "${foundProduct.name}"`, 'success');
            return foundProduct;
        }
    }
    
    addUpdateLog(`–¢–æ–≤–∞—Ä —Å Slimrate ID ${slimrateId} –Ω–µ –Ω–∞–π–¥–µ–Ω`, 'info');
    return null;
}

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏
async function findWooProductByMultipleCriteria(slimrateItem) {
    if (!window.SEARCH_CONFIG.enableProductLinking || window.SEARCH_CONFIG.matchingStrategy === 'slimrate_id_only') {
        return null;
    }
    
    const baseUrl = `${WOOCOMMERCE_SITE.replace(/\/$/, '')}/wp-json/wc/v3/products`;
    const auth = btoa(`${WOOCOMMERCE_CONSUMER_KEY}:${WOOCOMMERCE_CONSUMER_SECRET}`);
    
    addUpdateLog(`üîç –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ (—Å—Ç—Ä–∞—Ç–µ–≥–∏—è: ${window.SEARCH_CONFIG.matchingStrategy})`, 'info');
    
    // 2. –ü–æ–∏—Å–∫ –ø–æ SKU (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
    if (['sku_priority', 'auto', 'aggressive'].includes(window.SEARCH_CONFIG.matchingStrategy) && slimrateItem.skuCode) {
        addUpdateLog(`–ü–æ–∏—Å–∫ –ø–æ SKU: ${slimrateItem.skuCode}`, 'debug');
        
        const skuSearchUrl = `${baseUrl}?sku=${encodeURIComponent(slimrateItem.skuCode)}`;
        const skuResp = await fetch(skuSearchUrl, {
            headers: { 'Authorization': `Basic ${auth}` }
        });
        const skuData = await skuResp.json();
        
        if (Array.isArray(skuData) && skuData.length > 0) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–≤–∞—Ä –µ—â–µ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É Slimrate ID
            const unlinkedProduct = skuData.find(product => {
                const meta = product.meta_data || [];
                return !meta.some(m => m.key === 'slimrate_id' && m.value);
            });
            
            if (unlinkedProduct) {
                addUpdateLog(`‚úÖ –ù–∞–π–¥–µ–Ω —Ç–æ–≤–∞—Ä –ø–æ SKU: ${unlinkedProduct.id} - "${unlinkedProduct.name}"`, 'success');
                return unlinkedProduct;
            }
        }
    }
    
    // 3. –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é (–¥–ª—è auto –∏ aggressive)
    if (['auto', 'aggressive'].includes(window.SEARCH_CONFIG.matchingStrategy)) {
        const productName = getSlimrateProductName(slimrateItem);
        
        if (productName && productName !== '–¢–æ–≤–∞—Ä –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è') {
            addUpdateLog(`–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é: "${productName}"`, 'debug');
            
            const nameSearchUrl = `${baseUrl}?search=${encodeURIComponent(productName)}&per_page=20`;
            const nameResp = await fetch(nameSearchUrl, {
                headers: { 'Authorization': `Basic ${auth}` }
            });
            const nameData = await nameResp.json();
            
            if (Array.isArray(nameData) && nameData.length > 0) {
                // –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ä–µ–¥–∏ –Ω–µ–ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
                const exactMatch = nameData.find(product => {
                    const meta = product.meta_data || [];
                    const isUnlinked = !meta.some(m => m.key === 'slimrate_id' && m.value);
                    const nameMatch = product.name.toLowerCase() === productName.toLowerCase();
                    return isUnlinked && nameMatch;
                });
                
                if (exactMatch) {
                    addUpdateLog(`‚úÖ –ù–∞–π–¥–µ–Ω —Ç–æ–≤–∞—Ä –ø–æ —Ç–æ—á–Ω–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é: ${exactMatch.id} - "${exactMatch.name}"`, 'success');
                    return exactMatch;
                }
            }
        }
    }
    
    // 4. –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é + –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è aggressive)
    if (window.SEARCH_CONFIG.matchingStrategy === 'aggressive' && slimrateItem.category?.displayName) {
        const productName = getSlimrateProductName(slimrateItem);
        const categoryName = slimrateItem.category.displayName;
        
        addUpdateLog(`–ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é + –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: "${productName}" –≤ "${categoryName}"`, 'debug');
        
        // –°–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        const category = await findWooCategoryByName(categoryName);
        if (category) {
            const categorySearchUrl = `${baseUrl}?category=${category.id}&search=${encodeURIComponent(productName)}&per_page=10`;
            const categoryResp = await fetch(categorySearchUrl, {
                headers: { 'Authorization': `Basic ${auth}` }
            });
            const categoryData = await categoryResp.json();
            
            if (Array.isArray(categoryData) && categoryData.length > 0) {
                const categoryMatch = categoryData.find(product => {
                    const meta = product.meta_data || [];
                    return !meta.some(m => m.key === 'slimrate_id' && m.value);
                });
                
                if (categoryMatch) {
                    addUpdateLog(`‚úÖ –ù–∞–π–¥–µ–Ω —Ç–æ–≤–∞—Ä –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é + –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${categoryMatch.id} - "${categoryMatch.name}"`, 'success');
                    return categoryMatch;
                }
            }
        }
    }
    
    addUpdateLog(`‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º`, 'warning');
    return null;
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –∏–∑ Slimrate
function getSlimrateProductName(item) {
    if (item.rootName) return item.rootName;
    if (item.wooInfo?.name) return item.wooInfo.name;
    if (item.displayName) return item.displayName;
    return '–¢–æ–≤–∞—Ä –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ slimrate_id —É –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
async function linkProductToSlimrate(wooProductId, slimrateId) {
    const url = `${WOOCOMMERCE_SITE.replace(/\/$/, '')}/wp-json/wc/v3/products/${wooProductId}`;
    const auth = btoa(`${WOOCOMMERCE_CONSUMER_KEY}:${WOOCOMMERCE_CONSUMER_SECRET}`);
    
    const updateData = {
        meta_data: [
            {
                key: 'slimrate_id',
                value: slimrateId
            }
        ]
    };
    
    const resp = await fetch(url, {
        method: 'PATCH',
        headers: {
            'Content-Type': 'application/json',
            'Authorization': `Basic ${auth}`
        },
        body: JSON.stringify(updateData)
    });
    
    const result = await resp.json();
    if (result.id) {
        addUpdateLog(`üîó –¢–æ–≤–∞—Ä WooCommerce ID ${wooProductId} –ø—Ä–∏–≤—è–∑–∞–Ω –∫ Slimrate ID ${slimrateId}`, 'success');
        return true;
    } else {
        addUpdateLog(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ —Ç–æ–≤–∞—Ä–∞: ${JSON.stringify(result)}`, 'error');
        return false;
    }
}

async function updateWooProduct(wooProductId, updateData) {
    const url = `${WOOCOMMERCE_SITE.replace(/\/$/, '')}/wp-json/wc/v3/products/${wooProductId}`;
    const auth = btoa(`${WOOCOMMERCE_CONSUMER_KEY}:${WOOCOMMERCE_CONSUMER_SECRET}`);
    const resp = await fetch(url, {
        method: 'PATCH',
        headers: {
            'Content-Type': 'application/json',
            'Authorization': `Basic ${auth}`
        },
        body: JSON.stringify(updateData)
    });
    return await resp.json();
}

async function getWooProductVariations(productId) {
    const url = `${WOOCOMMERCE_SITE.replace(/\/$/, '')}/wp-json/wc/v3/products/${productId}/variations?per_page=100`;
    const auth = btoa(`${WOOCOMMERCE_CONSUMER_KEY}:${WOOCOMMERCE_CONSUMER_SECRET}`);
    const resp = await fetch(url, {
        headers: { 'Authorization': `Basic ${auth}` }
    });
    return await resp.json();
}

async function updateWooVariation(productId, variationId, updateData) {
    const url = `${WOOCOMMERCE_SITE.replace(/\/$/, '')}/wp-json/wc/v3/products/${productId}/variations/${variationId}`;
    const auth = btoa(`${WOOCOMMERCE_CONSUMER_KEY}:${WOOCOMMERCE_CONSUMER_SECRET}`);
    const resp = await fetch(url, {
        method: 'PATCH',
        headers: {
            'Content-Type': 'application/json',
            'Authorization': `Basic ${auth}`
        },
        body: JSON.stringify(updateData)
    });
    return await resp.json();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ WooCommerce
async function deleteWooProduct(wooProductId) {
    const url = `${WOOCOMMERCE_SITE.replace(/\/$/, '')}/wp-json/wc/v3/products/${wooProductId}?force=true`;
    const auth = btoa(`${WOOCOMMERCE_CONSUMER_KEY}:${WOOCOMMERCE_CONSUMER_SECRET}`);
    const resp = await fetch(url, {
        method: 'DELETE',
        headers: {
            'Authorization': `Basic ${auth}`
        }
    });
    return await resp.json();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ WooCommerce –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
async function findWooCategoryByName(categoryName) {
    const url = `${WOOCOMMERCE_SITE.replace(/\/$/, '')}/wp-json/wc/v3/products/categories?search=${encodeURIComponent(categoryName)}`;
    const auth = btoa(`${WOOCOMMERCE_CONSUMER_KEY}:${WOOCOMMERCE_CONSUMER_SECRET}`);
    const resp = await fetch(url, {
        headers: { 'Authorization': `Basic ${auth}` }
    });
    const data = await resp.json();
    return Array.isArray(data) && data.length > 0 ? data[0] : null;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ WooCommerce
async function createWooCategory(categoryName) {
    const url = `${WOOCOMMERCE_SITE.replace(/\/$/, '')}/wp-json/wc/v3/products/categories`;
    const auth = btoa(`${WOOCOMMERCE_CONSUMER_KEY}:${WOOCOMMERCE_CONSUMER_SECRET}`);
    const resp = await fetch(url, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Authorization': `Basic ${auth}`
        },
        body: JSON.stringify({
            name: categoryName,
            slug: categoryName.toLowerCase().replace(/[^a-z0-9]+/g, '-')
        })
    });
    return await resp.json();
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–∞
async function updateProductCategory(slimrateCategory, productUpdateData, wooProductId) {
    const categoryName = slimrateCategory.displayName;
    
    // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ WooCommerce
    addUpdateLog(`–ü–æ–∏—Å–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${categoryName}" –≤ WooCommerce...`, 'info');
    let wooCategory = await findWooCategoryByName(categoryName);
    
    if (!wooCategory) {
        // –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –µ—ë
        addUpdateLog(`–ö–∞—Ç–µ–≥–æ—Ä–∏—è "${categoryName}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é...`, 'info');
        wooCategory = await createWooCategory(categoryName);
        
        if (wooCategory && wooCategory.id) {
            addUpdateLog(`–ö–∞—Ç–µ–≥–æ—Ä–∏—è "${categoryName}" —Å–æ–∑–¥–∞–Ω–∞ —Å ID: ${wooCategory.id}`, 'success');
        } else {
            addUpdateLog(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${categoryName}": ${JSON.stringify(wooCategory)}`, 'error');
            return;
        }
    } else {
        addUpdateLog(`–ö–∞—Ç–µ–≥–æ—Ä–∏—è "${categoryName}" –Ω–∞–π–¥–µ–Ω–∞ —Å ID: ${wooCategory.id}`, 'success');
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫ –¥–∞–Ω–Ω—ã–º –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
    if (wooCategory && wooCategory.id) {
        productUpdateData.categories = [{ id: wooCategory.id }];
        addUpdateLog(`–¢–æ–≤–∞—Ä –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—ë–Ω —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π: "${categoryName}" (ID: ${wooCategory.id})`, 'info');
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø—É—Å—Ç—ã—Ö –ø–æ–ª–µ–π –∏–∑ –æ–±—ä–µ–∫—Ç–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ WooCommerce
function cleanEmptyFields(obj) {
    const cleaned = {};
    
    for (const [key, value] of Object.entries(obj)) {
        // –ò—Å–∫–ª—é—á–∞–µ–º null, undefined, –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –ø—É—Å—Ç—ã–µ –º–∞—Å—Å–∏–≤—ã
        if (value !== null && value !== undefined && value !== '' && 
            !(Array.isArray(value) && value.length === 0)) {
            cleaned[key] = value;
        }
    }
    
    return cleaned;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤ WooCommerce
async function createWooProduct(item) {
    const url = `${WOOCOMMERCE_SITE.replace(/\/$/, '')}/wp-json/wc/v3/products`;
    const auth = btoa(`${WOOCOMMERCE_CONSUMER_KEY}:${WOOCOMMERCE_CONSUMER_SECRET}`);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
    let productName = '–ù–æ–≤—ã–π —Ç–æ–≤–∞—Ä';
    if (item.rootName) {
        productName = item.rootName;
    } else if (item.wooInfo && item.wooInfo.name) {
        productName = item.wooInfo.name;
    } else if (item.displayName) {
        productName = item.displayName;
    }
    
    // –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞
    const productData = {
        name: productName,
        type: 'simple',
        status: 'publish',
        catalog_visibility: 'visible',
        sku: item.skuCode || '',
        meta_data: [
            {
                key: 'slimrate_id',
                value: (item.varName === "" || !item.varName) ? item.rootId : item.id
            }
        ]
    };
    
    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–º: –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Ç–∫–ª—é—á–µ–Ω–æ, –Ω–æ —É—á–∏—Ç—ã–≤–∞–µ–º –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑–∞–ª –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    const itemData = item.items && item.items[0] ? item.items[0] : item; // –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞–º–∏
    const startQuantity = itemData.startQuantity;
    
    if (startQuantity !== undefined && startQuantity !== null && startQuantity !== "" && Number(startQuantity) >= 0) {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑–∞–ª –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ Slimrate - –≤–∫–ª—é—á–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–º
        const quantityNum = Number(startQuantity);
        productData.manage_stock = true;
        productData.stock_quantity = quantityNum;
        productData.stock_status = quantityNum > 0 ? 'instock' : 'outofstock';
        addUpdateLog(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑–∞–ª –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ${quantityNum} - –≤–∫–ª—é—á–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–º`, 'info');
    } else {
        // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ - –æ—Ç–∫–ª—é—á–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–º, —Ç–æ–≤–∞—Ä –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–µ–Ω
        productData.manage_stock = false;
        productData.stock_status = 'instock';
        addUpdateLog(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–º –æ—Ç–∫–ª—é—á–µ–Ω–æ, —Ç–æ–≤–∞—Ä –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–µ–Ω`, 'info');
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–µ–Ω—ã - –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å –¥–µ—Å—è—Ç–∏—á–Ω—ã–º–∏ –¥—Ä–æ–±—è–º–∏
    let hasPrices = false;
    const priceValue = parseFloat(item.price);
    const strikePriceValue = parseFloat(item.strikeThroughPrice);
    
    if (item.strikeThroughPrice && strikePriceValue > 0 && item.price && priceValue > 0) {
        // –ï—Å—Ç—å –∏ –æ–±—ã—á–Ω–∞—è —Ü–µ–Ω–∞ –∏ —Ü–µ–Ω–∞ —Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∏
        productData.regular_price = String(item.strikeThroughPrice);
        productData.sale_price = String(item.price);
        addUpdateLog(`–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–µ–Ω—ã: –æ–±—ã—á–Ω–∞—è=${item.strikeThroughPrice}, —Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∞=${item.price}`, 'info');
        hasPrices = true;
    } else if (item.price && priceValue > 0) {
        // –¢–æ–ª—å–∫–æ –æ–±—ã—á–Ω–∞—è —Ü–µ–Ω–∞
        productData.regular_price = String(item.price);
        // –ù–ï —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º sale_price –≤–æ–æ–±—â–µ, —á—Ç–æ–±—ã –Ω–µ –ª–æ–º–∞—Ç—å –∑–∞–ø—Ä–æ—Å
        addUpdateLog(`–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—ã—á–Ω—É—é —Ü–µ–Ω—É: ${item.price}`, 'info');
        hasPrices = true;
    }
    
    if (!hasPrices) {
        addUpdateLog(`–¶–µ–Ω—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã –≤ Slimrate, —Ç–æ–≤–∞—Ä –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –±–µ–∑ —Ü–µ–Ω`, 'warning');
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å
    if (item.wooInfo) {
        if (item.wooInfo.description) {
            productData.description = item.wooInfo.description;
        }
        if (item.wooInfo.shortDescription) {
            productData.short_description = item.wooInfo.shortDescription;
        }
    }
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const images = processSlimrateImages(item);
    if (window.SEARCH_CONFIG.enableImageSync && images.length > 0) {
        productData.images = images;
        addUpdateLog(`–î–æ–±–∞–≤–ª—è–µ–º ${images.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫ —Ç–æ–≤–∞—Ä—É`, 'info');
    } else if (!window.SEARCH_CONFIG.enableImageSync) {
        addUpdateLog(`–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö`, 'info');
    }
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    if (item.category && item.category.displayName) {
        const categoryName = item.category.displayName;
        let wooCategory = await findWooCategoryByName(categoryName);
        
        if (!wooCategory) {
            addUpdateLog(`–°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é: "${categoryName}"`, 'info');
            wooCategory = await createWooCategory(categoryName);
        }
        
        if (wooCategory && wooCategory.id) {
            productData.categories = [{ id: wooCategory.id }];
            addUpdateLog(`–¢–æ–≤–∞—Ä –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π: "${categoryName}" (ID: ${wooCategory.id})`, 'info');
        }
    }
    
    addUpdateLog(`–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤ WooCommerce: "${productName}"`, 'info');
    addUpdateLog(`–î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è: ${JSON.stringify(productData, null, 2)}`, 'debug');
    
    // –û—á–∏—â–∞–µ–º –ø—É—Å—Ç—ã–µ –ø–æ–ª—è –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
    const cleanedProductData = cleanEmptyFields(productData);
    addUpdateLog(`–û—á–∏—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: ${JSON.stringify(cleanedProductData, null, 2)}`, 'debug');
    
    const resp = await fetch(url, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Authorization': `Basic ${auth}`
        },
        body: JSON.stringify(cleanedProductData)
    });
    
    const result = await resp.json();
    
    if (result.id) {
        addUpdateLog(`‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –≤ WooCommerce: ID ${result.id} - "${result.name}"`, 'success');
        addUpdateLog(`üîó –¢–æ–≤–∞—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ Slimrate ID: ${productData.meta_data[0].value}`, 'success');
        return result;
    } else {
        addUpdateLog(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: ${result.message || JSON.stringify(result)}`, 'error');
        return null;
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞
async function processProduct(item) {
    const searchId = (item.varName === "" || !item.varName) ? item.rootId : item.id;
    
    addUpdateLog(`=== –û–ë–†–ê–ë–û–¢–ö–ê –¢–û–í–ê–†–ê ${item.id} ===`, 'info');
    addUpdateLog(`–ü—Ä–æ—Å—Ç–æ–π —Ç–æ–≤–∞—Ä (varName –ø—É—Å—Ç–æ–µ): –∏—â–µ–º –ø–æ rootId="${item.rootId}" –≤–º–µ—Å—Ç–æ id="${item.id}"`, 'info');
    
    // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ø–æ slimrate_id (–æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–æ—Å–æ–±)
    addUpdateLog(`–ò—â–µ–º —Ç–æ–≤–∞—Ä –≤ Woo –ø–æ slimrate_id: ${searchId}`);
    let wooProduct = await findWooProductBySlimrateId(searchId);
    
    if (!wooProduct) {
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ slimrate_id, –ø—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫ –ø–æ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º
        addUpdateLog(`–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ Slimrate ID, –∑–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫...`);
        wooProduct = await findWooProductByMultipleCriteria(item);
        
        if (wooProduct) {
            // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –ø–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º, –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ Slimrate
            addUpdateLog(`–¢–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω –ø–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º, –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ Slimrate ID: ${searchId}`);
            const linked = await linkProductToSlimrate(wooProduct.id, searchId);
            if (!linked) {
                addUpdateLog(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–≤—è–∑–∞—Ç—å —Ç–æ–≤–∞—Ä, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ`, 'error');
                return;
            }
        }
    }

    if (wooProduct) {
        addUpdateLog(`WooCommerce product –Ω–∞–π–¥–µ–Ω: id=${wooProduct.id}, name='${wooProduct.name}', type=${wooProduct.type}`, 'success');

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        if (wooProduct.type === 'simple') {
            addUpdateLog(`=== –û–ë–†–ê–ë–û–¢–ö–ê –ü–†–û–°–¢–û–ì–û –¢–û–í–ê–†–ê ===`, 'info');
        } else if (wooProduct.type === 'variable') {
            addUpdateLog(`=== –û–ë–†–ê–ë–û–¢–ö–ê –í–ê–†–ò–ê–¢–ò–í–ù–û–ì–û –¢–û–í–ê–†–ê ===`, 'info');
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞
        let productUpdateData = {};
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        let productName = wooProduct.name; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
        addUpdateLog(`–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ WooCommerce: "${wooProduct.name}"`, 'debug');
        addUpdateLog(`–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–∑–≤–∞–Ω–∏—è - rootName: "${item.rootName || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}", wooInfo.name: "${(item.wooInfo && item.wooInfo.name) || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}", displayName: "${item.displayName || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}"`, 'debug');
        
        if (item.rootName) {
            productName = item.rootName;
            addUpdateLog(`–ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ rootName: "${productName}"`, 'info');
        }
        else if (item.wooInfo && item.wooInfo.name) {
            productName = item.wooInfo.name;
            addUpdateLog(`–ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ wooInfo.name: "${productName}"`, 'info');
        } else if (item.displayName) {
            productName = item.displayName;
            addUpdateLog(`–ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ displayName: "${productName}"`, 'info');
        } else {
            addUpdateLog(`–û—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ WooCommerce: "${productName}"`, 'info');
        }
        
        productUpdateData.name = productName;
        addUpdateLog(`–§–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: "${productUpdateData.name}"`, 'info');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
        if (item.category && item.category.id) {
            addUpdateLog(`–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: Slimrate category="${item.category.displayName}" (id: ${item.category.id})`, 'info');
            // –ù–∞–π–¥–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ WooCommerce
            await updateProductCategory(item.category, productUpdateData, wooProduct.id);
        }
        
        if (wooProduct.type === 'simple') {
           // –î–ª—è –ø—Ä–æ—Å—Ç—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ API /items/read/tablet –¥–∞–Ω–Ω—ã–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –∫–æ—Ä–Ω–µ –æ–±—ä–µ–∫—Ç–∞
           // (–≤ –æ—Ç–ª–∏—á–∏–µ –æ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ /item-roots/read –≥–¥–µ –¥–∞–Ω–Ω—ã–µ –≤ item.items[0])
           const simpleItem = item; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä–µ–Ω—å –æ–±—ä–µ–∫—Ç–∞
           
           addUpdateLog(`–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞: –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ—Ä–Ω—è –æ–±—ä–µ–∫—Ç–∞ (API /items/read/tablet)`, 'info');
           
           // –£–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ü–µ–Ω –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ - –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å –¥–µ—Å—è—Ç–∏—á–Ω—ã–º–∏ –¥—Ä–æ–±—è–º–∏
           let hasPriceUpdates = false;
           const priceValue = parseFloat(simpleItem.price);
           const strikePriceValue = parseFloat(simpleItem.strikeThroughPrice);
           
           if (simpleItem.strikeThroughPrice && strikePriceValue > 0 && simpleItem.price && priceValue > 0) {
               // –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞—á–µ—Ä–∫–Ω—É—Ç–∞—è —Ü–µ–Ω–∞, —Ç–æ —ç—Ç–æ –æ–±—ã—á–Ω–∞—è —Ü–µ–Ω–∞, –∞ price - —Ü–µ–Ω–∞ —Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∏
               productUpdateData.regular_price = String(simpleItem.strikeThroughPrice);
               productUpdateData.sale_price = String(simpleItem.price);
               addUpdateLog(`–û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—ã: –æ–±—ã—á–Ω–∞—è=${simpleItem.strikeThroughPrice}, —Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∞=${simpleItem.price}`, 'info');
               hasPriceUpdates = true;
           } else if (simpleItem.price && priceValue > 0) {
               // –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–±—ã—á–Ω–∞—è —Ü–µ–Ω–∞
               productUpdateData.regular_price = String(simpleItem.price);
               // –ù–ï —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º sale_price –≤–æ–æ–±—â–µ, —á—Ç–æ–±—ã –Ω–µ –ª–æ–º–∞—Ç—å –∑–∞–ø—Ä–æ—Å
               addUpdateLog(`–û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–±—ã—á–Ω—É—é —Ü–µ–Ω—É: ${simpleItem.price}`, 'info');
               hasPriceUpdates = true;
           }
           
           if (!hasPriceUpdates) {
               addUpdateLog(`–¶–µ–Ω—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã –≤ Slimrate, –ø–æ–ª—è —Ü–µ–Ω –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ –∑–∞–ø—Ä–æ—Å–∞`, 'info');
           }
           
           // –û–±–Ω–æ–≤–ª—è–µ–º SKU
           productUpdateData.sku = simpleItem.skuCode || wooProduct.sku;
           
           // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–º: –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Ç–∫–ª—é—á–µ–Ω–æ, –Ω–æ —É—á–∏—Ç—ã–≤–∞–µ–º –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑–∞–ª –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
           const startQuantity = simpleItem.startQuantity;
           
           if (startQuantity !== undefined && startQuantity !== null && startQuantity !== "" && Number(startQuantity) >= 0) {
               // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑–∞–ª –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ Slimrate - –≤–∫–ª—é—á–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–º
               const quantityNum = Number(startQuantity);
               productUpdateData.manage_stock = true;
               productUpdateData.stock_quantity = quantityNum;
               productUpdateData.stock_status = quantityNum > 0 ? 'instock' : 'outofstock';
               addUpdateLog(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑–∞–ª –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ${quantityNum} - –≤–∫–ª—é—á–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–º`, 'info');
           } else {
               // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ - –æ—Ç–∫–ª—é—á–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–º, —Ç–æ–≤–∞—Ä –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–µ–Ω
               productUpdateData.manage_stock = false;
               productUpdateData.stock_status = 'instock';
               addUpdateLog(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–º –æ—Ç–∫–ª—é—á–µ–Ω–æ, —Ç–æ–≤–∞—Ä –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–µ–Ω`, 'info');
           }
           
           // –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏—è –∏–∑ wooInfo –µ—Å–ª–∏ –µ—Å—Ç—å
           if (simpleItem.wooInfo) {
               if (simpleItem.wooInfo.description !== undefined) {
                   productUpdateData.description = simpleItem.wooInfo.description;
               }
               if (simpleItem.wooInfo.shortDescription !== undefined) {
                   productUpdateData.short_description = simpleItem.wooInfo.shortDescription;
               }
           }
           
           addUpdateLog(`–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ - —Ü–µ–Ω—ã: regular=${productUpdateData.regular_price}, sale=${productUpdateData.sale_price}, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–º: ${productUpdateData.manage_stock ? `–≤–∫–ª—é—á–µ–Ω–æ (${productUpdateData.stock_quantity})` : '–æ—Ç–∫–ª—é—á–µ–Ω–æ'}, SKU: ${productUpdateData.sku}`, 'info');
        }

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤
        if (window.SEARCH_CONFIG.enableImageSync) {
            const images = processSlimrateImages(item);
            if (images.length > 0) {
                productUpdateData.images = images;
                addUpdateLog(`–û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: ${images.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`, 'info');
            } else {
                addUpdateLog(`–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Slimrate –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è WooCommerce`, 'info');
            }
        } else {
            addUpdateLog(`–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö`, 'info');
        }

        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
        const fieldsToLogForProduct = ['name', 'sku', 'categories', 'images', 'manage_stock', 'stock_status'];
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è —Ü–µ–Ω —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if (productUpdateData.hasOwnProperty('regular_price')) {
            fieldsToLogForProduct.push('regular_price');
        }
        if (productUpdateData.hasOwnProperty('sale_price')) {
            fieldsToLogForProduct.push('sale_price');
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–º –≤–∫–ª—é—á–µ–Ω–æ
        if (productUpdateData.hasOwnProperty('stock_quantity')) {
            fieldsToLogForProduct.push('stock_quantity');
        }
        
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è
        addUpdateLog(`–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π: —Å—Ç–∞—Ä–æ–µ="${wooProduct.name}" vs –Ω–æ–≤–æ–µ="${productUpdateData.name}" (—Ä–∞–≤–Ω—ã: ${wooProduct.name === productUpdateData.name})`, 'info');
        
        const changesLogProduct = getChangedFieldsLog(wooProduct, productUpdateData, fieldsToLogForProduct);
        addUpdateLog(`–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—é —Ç–æ–≤–∞—Ä–∞ Woo id=${wooProduct.id} (Slimrate id=${searchId}). ${changesLogProduct}`, 'info');

        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        addUpdateLog(`–ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: ${JSON.stringify(productUpdateData, null, 2)}`, 'debug');

        // –û—á–∏—â–∞–µ–º –ø—É—Å—Ç—ã–µ –ø–æ–ª—è –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        const cleanedUpdateData = cleanEmptyFields(productUpdateData);
        addUpdateLog(`–û—á–∏—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: ${JSON.stringify(cleanedUpdateData, null, 2)}`, 'debug');

        const updateResult = await updateWooProduct(wooProduct.id, cleanedUpdateData);
        
        if (updateResult && !updateResult.code) {
            addUpdateLog(`–¢–æ–≤–∞—Ä WooCommerce –æ–±–Ω–æ–≤–ª—ë–Ω: id=${wooProduct.id} (Slimrate id=${searchId})`, 'success');
        } else {
            addUpdateLog(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ Woo id=${wooProduct.id} (Slimrate id=${searchId}): ${updateResult.message || JSON.stringify(updateResult)}`, 'error');
        }

    } else {
        // –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω - –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è
        if (window.SEARCH_CONFIG.enableProductCreation) {
            addUpdateLog(`üÜï –¢–æ–≤–∞—Ä —Å slimrate_id=${searchId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ WooCommerce - —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä`, 'info');
            
            const newProduct = await createWooProduct(item);
            
            if (newProduct) {
                addUpdateLog(`‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω: WC ID ${newProduct.id} ‚Üî Slimrate ID ${searchId}`, 'success');
            } else {
                addUpdateLog(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–æ–≤–∞—Ä –¥–ª—è Slimrate ID ${searchId}`, 'error');
            }
        } else {
            addUpdateLog(`‚ùå –¢–æ–≤–∞—Ä —Å slimrate_id=${searchId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ WooCommerce`, 'warning');
            addUpdateLog(`üí° –ê–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–æ. –í–∫–ª—é—á–∏—Ç–µ –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ —Ç–æ–≤–∞—Ä –≤—Ä—É—á–Ω—É—é`, 'info');
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∞—Ä–∏–∞—Ü–∏–∏
async function processVariation(item) {
    addUpdateLog(`–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∫ –≤–∞—Ä–∏–∞—Ü–∏—è: ${item.id} (—Ä–æ–¥–∏—Ç–µ–ª—å: ${item.rootId})`, 'info');
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∞—Ä–∏–∞—Ü–∏–π –ø–æ–∑–∂–µ
    addUpdateLog(`–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞—Ä–∏–∞—Ü–∏–π –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞`, 'warning');
}

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
async function processDeletedProduct(item) {
    const searchId = (item.varName === "" || !item.varName) ? item.rootId : item.id;
    
    addUpdateLog(`=== –û–ë–†–ê–ë–û–¢–ö–ê –£–î–ê–õ–ï–ù–ù–û–ì–û –¢–û–í–ê–†–ê ${item.id} ===`, 'warning');
    addUpdateLog(`–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –≤ Slimrate: deletedAt="${item.deletedAt}"`, 'warning');
    addUpdateLog(`–ò—â–µ–º —Ç–æ–≤–∞—Ä –≤ WooCommerce –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ slimrate_id: ${searchId}`);
    
    const wooProduct = await findWooProductBySlimrateId(searchId);
    
    if (wooProduct) {
        addUpdateLog(`–ù–∞–π–¥–µ–Ω —Ç–æ–≤–∞—Ä –≤ WooCommerce –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: id=${wooProduct.id}, name='${wooProduct.name}'`, 'info');
        
        // –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä –∏–∑ WooCommerce
        const deleteResult = await deleteWooProduct(wooProduct.id);
        
        if (deleteResult && !deleteResult.code) {
            addUpdateLog(`‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ WooCommerce: id=${wooProduct.id} (Slimrate id=${searchId})`, 'success');
        } else {
            addUpdateLog(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –∏–∑ WooCommerce: id=${wooProduct.id}, –æ—à–∏–±–∫–∞: ${deleteResult.message || JSON.stringify(deleteResult)}`, 'error');
        }
    } else {
        addUpdateLog(`–¢–æ–≤–∞—Ä —Å slimrate_id=${searchId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ WooCommerce - –≤–æ–∑–º–æ–∂–Ω–æ —É–∂–µ —É–¥–∞–ª–µ–Ω`, 'info');
    }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å updatedAt
function getLastUpdatedAt() {
    const saved = localStorage.getItem('slimrate_last_updated_at');
    if (saved) {
        addUpdateLog(`–ó–∞–≥—Ä—É–∂–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π updatedAt: ${saved}`, 'info');
        return saved;
    } else {
        // –ï—Å–ª–∏ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫, –±–µ—Ä–µ–º –≤—Ä–µ–º—è 24 —á–∞—Å–∞ –Ω–∞–∑–∞–¥
        const oneDayAgo = new Date();
        oneDayAgo.setHours(oneDayAgo.getHours() - 24);
        const defaultTime = oneDayAgo.toISOString();
        addUpdateLog(`–ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º—è 24 —á–∞—Å–∞ –Ω–∞–∑–∞–¥: ${defaultTime}`, 'info');
        return defaultTime;
    }
}

function saveLastUpdatedAt(timestamp) {
    localStorage.setItem('slimrate_last_updated_at', timestamp);
    addUpdateLog(`–°–æ—Ö—Ä–∞–Ω–µ–Ω –Ω–æ–≤—ã–π updatedAt: ${timestamp}`, 'info');
}

function resetLastUpdatedAt() {
    localStorage.removeItem('slimrate_last_updated_at');
    addUpdateLog('–°–±—Ä–æ—à–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π updatedAt - —Å–ª–µ–¥—É—é—â–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±—É–¥–µ—Ç —Å 24 —á–∞—Å–∞ –Ω–∞–∑–∞–¥', 'warning');
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –≤ WooCommerce
export async function updateItemsFromSlimrate() {
    addUpdateLog('–ó–∞–ø—Ä–æ—Å –∫ Slimrate –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤...');
    try {
        const slimrateApiUrl = 'https://dev.slimrate.com/v1/items/read/tablet';
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        const lastUpdatedAt = getLastUpdatedAt();
        
        // –§–∏–∫—Å–∏—Ä—É–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (—ç—Ç–æ –±—É–¥–µ—Ç –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ updatedAt)
        const syncStartTime = new Date().toISOString();
        
        const slimrateRequestBody = {
            updatedAt: lastUpdatedAt
            // limit: 100, // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            // offset: 0
        };

        addUpdateLog(`–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞: updatedAt=${lastUpdatedAt}`);

        const response = await fetch(slimrateApiUrl, {
            method: 'POST',
            headers: {
                'Authorization': AUTH_TOKEN,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(slimrateRequestBody)
        });

        const data = await response.json();

        if (response.ok && data.result) {
            const items = data.result;
            addUpdateLog(`–ü–æ–ª—É—á–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${items.length}`);

            let processedCount = 0;
            let updatedCount = 0;
            let deletedCount = 0;
            let errorCount = 0;

            for (const item of items) {
                try {
                    if (item.deletedAt) {
                        // –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –≤ Slimrate
                        await processDeletedProduct(item);
                        deletedCount++;
                    } else {
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –≤–∞—Ä–∏–∞—Ü–∏—è –∏–ª–∏ –æ–±—ã—á–Ω—ã–π —Ç–æ–≤–∞—Ä
                        if (item.varName && item.varName.trim() !== "") {
                            // –≠—Ç–æ –≤–∞—Ä–∏–∞—Ü–∏—è
                            await processVariation(item);
                        } else {
                            // –≠—Ç–æ –ø—Ä–æ—Å—Ç–æ–π —Ç–æ–≤–∞—Ä
                            await processProduct(item);
                        }
                        updatedCount++;
                    }
                    
                    processedCount++;
                } catch (error) {
                    addUpdateLog(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞ ${item.id}: ${error.message}`, 'error');
                    errorCount++;
                }
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ
            if (errorCount === 0 || (processedCount > errorCount)) {
                saveLastUpdatedAt(syncStartTime);
                addUpdateLog(`–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${processedCount}, –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${updatedCount}, —É–¥–∞–ª–µ–Ω–æ: ${deletedCount}, –æ—à–∏–±–æ–∫: ${errorCount}`, 'success');
            } else {
                addUpdateLog(`–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏. –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ù–ï –æ–±–Ω–æ–≤–ª–µ–Ω–æ.`, 'warning');
            }

        } else {
            throw new Error(data.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ API');
        }

    } catch (error) {
        addUpdateLog(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: ${error.message}`, 'error');
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ Slimrate
function processSlimrateImages(item) {
    const images = [];
    
    // –û—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
    if (item.image && item.image.trim()) {
        images.push({
            src: item.image.trim(),
            name: '–û—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
            alt: item.rootName || item.displayName || '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞'
        });
    }
    
    // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ wooInfo.pictures
    if (item.wooInfo && Array.isArray(item.wooInfo.pictures)) {
        item.wooInfo.pictures.forEach((pictureUrl, index) => {
            if (pictureUrl && pictureUrl.trim()) {
                images.push({
                    src: pictureUrl.trim(),
                    name: `–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${index + 2}`,
                    alt: `${item.rootName || item.displayName || '–¢–æ–≤–∞—Ä'} - –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${index + 2}`
                });
            }
        });
    }
    
    // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ URL
    const uniqueImages = [];
    const seenUrls = new Set();
    
    images.forEach(img => {
        if (!seenUrls.has(img.src)) {
            seenUrls.add(img.src);
            uniqueImages.push(img);
        }
    });
    
    addUpdateLog(`–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${uniqueImages.length} (${images.length - uniqueImages.length} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —É–¥–∞–ª–µ–Ω–æ)`, 'debug');
    
    return uniqueImages;
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –≤–Ω–µ—à–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
export { findWooProductBySlimrateId, findWooProductByMultipleCriteria, linkProductToSlimrate, resetLastUpdatedAt };