import { updateItemsFromSlimrate } from '../sync/updateItems.js';
import { addLogEntry } from './utils.js';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
let autoSyncConfig = {
    enabled: false,
    intervalMinutes: 30, // –ò–Ω—Ç–µ—Ä–≤–∞–ª –≤ –º–∏–Ω—É—Ç–∞—Ö
    lastSync: null,
    isRunning: false
};

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ localStorage
function saveAutoSyncConfig() {
    localStorage.setItem('slimrate_autosync_config', JSON.stringify(autoSyncConfig));
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ localStorage
function loadAutoSyncConfig() {
    const saved = localStorage.getItem('slimrate_autosync_config');
    if (saved) {
        autoSyncConfig = { ...autoSyncConfig, ...JSON.parse(saved) };
    }
}

// –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
let syncInterval = null;

// –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
async function performAutoSync() {
    if (autoSyncConfig.isRunning) {
        addLogEntry('–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...', 'warning', 'scheduler');
        return;
    }

    try {
        autoSyncConfig.isRunning = true;
        autoSyncConfig.lastSync = new Date().toISOString();
        saveAutoSyncConfig();
        
        addLogEntry(`üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞ (–∏–Ω—Ç–µ—Ä–≤–∞–ª: ${autoSyncConfig.intervalMinutes} –º–∏–Ω)`, 'info', 'scheduler');
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
        await updateItemsFromSlimrate();
        
        addLogEntry('‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ', 'success', 'scheduler');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI –µ—Å–ª–∏ –µ—Å—Ç—å
        updateAutoSyncStatus();
        
    } catch (error) {
        addLogEntry(`‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: ${error.message}`, 'error', 'scheduler');
    } finally {
        autoSyncConfig.isRunning = false;
        saveAutoSyncConfig();
    }
}

// –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
function startAutoSync() {
    if (syncInterval) {
        clearInterval(syncInterval);
    }
    
    if (!autoSyncConfig.enabled) {
        addLogEntry('–ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞', 'info', 'scheduler');
        return;
    }
    
    const intervalMs = autoSyncConfig.intervalMinutes * 60 * 1000;
    
    addLogEntry(`üü¢ –ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞ (–∫–∞–∂–¥—ã–µ ${autoSyncConfig.intervalMinutes} –º–∏–Ω—É—Ç)`, 'success', 'scheduler');
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
    setTimeout(performAutoSync, 10000);
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
    syncInterval = setInterval(performAutoSync, intervalMs);
}

// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
function stopAutoSync() {
    if (syncInterval) {
        clearInterval(syncInterval);
        syncInterval = null;
    }
    
    autoSyncConfig.enabled = false;
    saveAutoSyncConfig();
    
    addLogEntry('üî¥ –ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞', 'warning', 'scheduler');
    updateAutoSyncStatus();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ UI
function updateAutoSyncStatus() {
    const statusElement = document.getElementById('autosync-status');
    const enableButton = document.getElementById('enable-autosync');
    const disableButton = document.getElementById('disable-autosync');
    const intervalInput = document.getElementById('autosync-interval');
    
    if (statusElement) {
        const status = autoSyncConfig.enabled ? 
            `üü¢ –í–∫–ª—é—á–µ–Ω–∞ (–∫–∞–∂–¥—ã–µ ${autoSyncConfig.intervalMinutes} –º–∏–Ω)` : 
            'üî¥ –û—Ç–∫–ª—é—á–µ–Ω–∞';
        
        const lastSync = autoSyncConfig.lastSync ? 
            `–ü–æ—Å–ª–µ–¥–Ω—è—è: ${new Date(autoSyncConfig.lastSync).toLocaleString()}` : 
            '–ù–∏–∫–æ–≥–¥–∞';
            
        statusElement.innerHTML = `
            <strong>–°—Ç–∞—Ç—É—Å:</strong> ${status}<br>
            <strong>–ü–æ—Å–ª–µ–¥–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è:</strong> ${lastSync}
        `;
    }
    
    if (enableButton && disableButton) {
        enableButton.style.display = autoSyncConfig.enabled ? 'none' : 'inline-block';
        disableButton.style.display = autoSyncConfig.enabled ? 'inline-block' : 'none';
    }
    
    if (intervalInput) {
        intervalInput.value = autoSyncConfig.intervalMinutes;
        intervalInput.disabled = autoSyncConfig.enabled;
    }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
function setAutoSyncInterval(minutes) {
    if (minutes < 5) {
        addLogEntry('–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: 5 –º–∏–Ω—É—Ç', 'error', 'scheduler');
        return false;
    }
    
    autoSyncConfig.intervalMinutes = minutes;
    saveAutoSyncConfig();
    
    addLogEntry(`–ò–Ω—Ç–µ—Ä–≤–∞–ª –∞–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${minutes} –º–∏–Ω—É—Ç`, 'info', 'scheduler');
    
    // –ï—Å–ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å –Ω–æ–≤—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
    if (autoSyncConfig.enabled) {
        startAutoSync();
    }
    
    return true;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
function initAutoSync() {
    loadAutoSyncConfig();
    updateAutoSyncStatus();
    
    // –ï—Å–ª–∏ –∞–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±—ã–ª–∞ –≤–∫–ª—é—á–µ–Ω–∞, –∑–∞–ø—É—Å–∫–∞–µ–º –µ—ë
    if (autoSyncConfig.enabled) {
        startAutoSync();
    }
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    const enableButton = document.getElementById('enable-autosync');
    const disableButton = document.getElementById('disable-autosync');
    const intervalInput = document.getElementById('autosync-interval');
    const setIntervalButton = document.getElementById('set-interval');
    
    if (enableButton) {
        enableButton.addEventListener('click', () => {
            autoSyncConfig.enabled = true;
            saveAutoSyncConfig();
            startAutoSync();
        });
    }
    
    if (disableButton) {
        disableButton.addEventListener('click', stopAutoSync);
    }
    
    if (setIntervalButton && intervalInput) {
        setIntervalButton.addEventListener('click', () => {
            const minutes = parseInt(intervalInput.value);
            if (setAutoSyncInterval(minutes)) {
                updateAutoSyncStatus();
            }
        });
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π
export { 
    initAutoSync, 
    startAutoSync, 
    stopAutoSync, 
    setAutoSyncInterval,
    updateAutoSyncStatus,
    performAutoSync 
}; 